"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTreeViewLabelItemPlugin = exports.isAndroid = void 0;
var React = _interopRequireWildcard(require("react"));
var _TreeViewProvider = require("../../TreeViewProvider");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const isAndroid = () => navigator.userAgent.toLowerCase().includes('android');
exports.isAndroid = isAndroid;
const useTreeViewLabelItemPlugin = ({
  props
}) => {
  const {
    instance
  } = (0, _TreeViewProvider.useTreeViewContext)();
  const {
    label,
    itemId
  } = props;
  const [labelInputValue, setLabelInputValue] = React.useState(label);
  const isItemBeingEdited = instance.isItemBeingEdited(itemId);
  React.useEffect(() => {
    if (!isItemBeingEdited) {
      setLabelInputValue(label);
    }
  }, [isItemBeingEdited, label]);
  return {
    propsEnhancers: {
      labelInput: ({
        externalEventHandlers
      }) => {
        const editable = instance.isItemEditable(itemId);
        if (!editable) {
          return {};
        }
        const handleInputChange = event => {
          externalEventHandlers.onChange?.(event);
          setLabelInputValue(event.target.value);
        };
        return {
          value: labelInputValue ?? '',
          'data-element': 'labelInput',
          onChange: handleInputChange,
          autoFocus: true,
          type: 'text'
        };
      }
    }
  };
};
exports.useTreeViewLabelItemPlugin = useTreeViewLabelItemPlugin;